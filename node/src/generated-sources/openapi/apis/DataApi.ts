/* tslint:disable */
/* eslint-disable */
/**
 * LanceDB Vector API
 * LanceDB Cloud API is a RESTful API that allows users to access and modify data stored in LanceDB Cloud. Table actions are considered temporary resource creations and all use POST method. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@lancedb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1TableNameQueryPostRequest,
} from '../models';
import {
    V1TableNameQueryPostRequestFromJSON,
    V1TableNameQueryPostRequestToJSON,
} from '../models';

export interface InsertDataRequest {
    name: string;
    body: Blob;
}

export interface V1TableNameQueryPostOperationRequest {
    name: string;
    v1TableNameQueryPostRequest: V1TableNameQueryPostRequest;
}

/**
 * 
 */
export class DataApi extends runtime.BaseAPI {

    /**
     * Insert data to a table
     * Insert data to a table
     */
    async insertDataRaw(requestParameters: InsertDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling insertData.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling insertData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.apache.arrow.stream';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // key_auth authentication
        }

        const response = await this.request({
            path: `/v1/table/{name}/insert/`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Insert data to a table
     * Insert data to a table
     */
    async insertData(requestParameters: InsertDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.insertDataRaw(requestParameters, initOverrides);
    }

    /**
     * Vector Query
     * Vector Query
     */
    async v1TableNameQueryPostRaw(requestParameters: V1TableNameQueryPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling v1TableNameQueryPost.');
        }

        if (requestParameters.v1TableNameQueryPostRequest === null || requestParameters.v1TableNameQueryPostRequest === undefined) {
            throw new runtime.RequiredError('v1TableNameQueryPostRequest','Required parameter requestParameters.v1TableNameQueryPostRequest was null or undefined when calling v1TableNameQueryPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // key_auth authentication
        }

        const response = await this.request({
            path: `/v1/table/{name}/query/`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1TableNameQueryPostRequestToJSON(requestParameters.v1TableNameQueryPostRequest),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Vector Query
     * Vector Query
     */
    async v1TableNameQueryPost(requestParameters: V1TableNameQueryPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.v1TableNameQueryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
